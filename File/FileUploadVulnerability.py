#File Upload Vulnerability
#공격자의 파일을 웹 서비스의 파일 시스템에 업로드하는 과정에서 발생하는 보안 취약점

#File Download Vulnerability
#웹 서비스의 파일 시스템에 존재하는 파일을 다운로드 하는 과정에서 발생하는 보안 취약점


#Figure 1
from flask import Flask, request
app = Flask(__name__)

@app.route('/fileUpload', methods = ['GET', 'POST'])
def Upload_file():
    if request.methods == 'POST':
        f = request.files['file']
        f.save("./uploads/" + f.filename)
        return 'Upload Success'
    else:
        return """
        <from action="fileUpload" method="POST" enctype="multipart/from-data">
            <input type="file" name="file" />
            <input type="submit" />
        </from>
        """

if __name__=='__main__':
    app.run()
    

#정상적인 파일 업로드 HTTP 요청
# POST /fileUpload HTTP/1.1
# Host: storage.dreamhack.io
# Origin: https://storage.dreamhack.io
# Content-Type: multipart/form-data; boundary=----WebKitFormBoundary20y3eoLVSNf9Ns5i
# ------WebKitFormBoundary20y3eoLVSNf9Ns5i
# Content-Disposition: form-data; name="file"; filename="test.txt"
# Content-Type: text/plain
# upload test !
# ------WebKitFormBoundary20y3eoLVSNf9Ns5i--


#서버 파일 시스템 확인
# $ ls -lR
# -rw-r--r--  1 dreamhack  staff  461  1 30 21:52 app.py
# drwxr-xr-x  3 dreamhack  staff   96  1 30 21:31 uploads
# ./uploads:
# total 8
# -rw-r--r--  1 dreamhack  staff   13  1 30 21:31 test.txt


#악의적인 파일 업로드 HTTP 요청
# POST /fileUpload HTTP/1.1
# Host: storage.dreamhack.io
# Origin: https://storage.dreamhack.io
# Content-Type: multipart/form-data; boundary=----WebKitFormBoundary20y3eoLVSNf9Ns5i
# ------WebKitFormBoundary20y3eoLVSNf9Ns5i
# Content-Disposition: form-data; name="file"; filename="../hack.py"
# Content-Type: text/plain
# [malicious file content]
# ------WebKitFormBoundary20y3eoLVSNf9Ns5i--
#요청 전송시 app.py와 같은 디렉토리에 Hack.py가 생성됨.


#공격을 당한 서버 파일 시스템 확인
# $ ls -lR
# -rw-r--r--  1 dreamhack  staff  461  1 30 21:52 app.py
# -rw-r--r--  1 dreamhack  staff  431  1 30 22:12 hack.py
# drwxr-xr-x  3 dreamhack  staff   96  1 30 21:31 uploads
# ./uploads:
# total 8
# -rw-r--r--  1 dreamhack  staff   13  1 30 21:31 test.txt


#악성 파일 업로드
#악성 파일 업로드 취약점은 이용자가 파일을 업로드할 때, 이를 제대로 검사하지 않아서 발생하는 취약점을 말합니다.

#웹 셸
# 웹 서버는 .php, .jsp, .asp와 같은 확장자의 파일을 Common Gateway Interface로 실행하고,
# 그 결과를 이용자에게 반환합니다. Figure6은 이용자가 요청한 파일의 확장자가 정규표현식
# ".+\.ph(p[3457]?lt|tml)$"를 만족하면, x-httpd-php로 핸들링하게 하는 Apache 설정 파일입니다.
# x-httpd-php는 PHP엔진이며 요청한 파일을 실행하고, 그 결과를 반환합니다. .php, .php3, .phtml이 위의 정규표현식을 만족합니다.


#악의적인 웹 리소스 
# 웹 브라우저는 파일의 확장자나 응답의 Content-Type에 따라 요청을 다양하게 처리합니다. 만약 요청한 파일의 확장자가
# .html 이거나, 반환된 Content-Type 헤더가 text/html일 경우 응답은 HTML 엔진으로 처리됩니다.
# 또 파일의 확장자가 .png, .jpg등의 이미지 확장자이거나, Content-Type이 Image/png일 경우에는 이미지로 렌더링됩니다.

#만약 공격자가 서버에 exploit.html을 업로드하고, 이에 접근하는 URL이 https://dreamhack.io/uploads/exploit.html이라면, 브라우저는 이를 HTML로 해석됩니다.
#exploit.html에 악의적인 스크립트를 삽입하면, Cross-Site-Scripting(XSS) 공격으로 이어질 수 있습니다.


